{"version":3,"sources":["component/PollView/action.js","component/ResultList/ResultList.js","component/Header/Header.js","component/PollView/PollView.js","App.js","serviceWorker.js","store/reducer.js","component/PollView/reducer.js","store/store.js","index.js"],"names":["BASE_URL","ResultList","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","timer","getSummary","setInterval","setState","summary","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","info","value","_id","count","err","return","listItems","key","entities","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","entity","num","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","label","hasOwnProperty","push","data","datasets","backgroundColor","labels","react","index_es","es","length","Divider_default","a","React","connect","polls","dispatch","fetch","then","res","status","Error","body","json","type","catch","console","error","Header","init","position","variant","color","align","toString","newEntities","PollView","nextEntity","buttons","_loop","index","ListItem_default","onClick","selected_add","button","primary","List_default","component","selected","App","checkUser","content","_this$props","nextIndex","ip","exist","upload","react_default","createElement","component_ResultList_ResultList","component_PollView_PollView","Grid_default","container","alignItems","justify","item","lg","sm","xs","component_Header_Header","Component","method","JSON","stringify","headers","Content-Type","log","Boolean","window","location","hostname","match","combineReducers","arguments","action","objectSpread","concat","store","createStore","reducer","composeWithDevTools","applyMiddleware","thunk","theme","createMuiTheme","overrides","ReactDOM","render","react_redux_es","styles","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9712cf03.chunk.js","sourcesContent":["import fetch from 'cross-fetch';\n\nexport const selected_add = (selected) => ({\n    type: 'ADD',\n    selected\n});\n\nexport const BASE_URL = 'https://glossy-window-229523.appspot.com/api';\n\nexport const init = () => (dispatch) => {\n    dispatch({type: 'FETCH_ENTITIES'});\n    fetch(BASE_URL + '/getEntities')\n        .then(res => {\n            if (res.status >= 400) {\n                throw new Error(res.json().toString())\n            } else {\n                return res.json()\n            }\n        }).then(entities => {\n        let newEntities = [];\n        for (let entity of entities) {\n            newEntities.push(entity.data)\n        }\n        dispatch({type: 'GOT_ENTITIES', entities: newEntities});\n\n    }).catch(err => console.error(err))\n};\n\nexport const upload = (selected, ip) => (dispatch) => {\n    fetch(BASE_URL + '/addUser', {\n        method: 'POST',\n        body: JSON.stringify({ip, selected}),\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    }).then(res => {\n        if (res.status >= 400) {\n            throw new Error(res.json().toString())\n        } else {\n            dispatch({type: 'USER_ADD_SUCCESS'});\n        }\n    }).catch(err => console.error(err))\n\n};\n\nexport const getSummary = () => (dispatch) => {\n    fetch(BASE_URL + \"/getSummary\")\n        .then(res => {\n            if (res.status >= 400) {\n                throw new Error(res.body);\n            } else {\n                return res.json();\n            }\n        }).then(summary => {\n        dispatch({type: 'GET_SUMMARY', summary})\n    }).catch(err => console.error(err))\n};\n\nexport const checkUser = () => (dispatch) => {\n    fetch(\"https://ifconfig.me/all.json\")\n        .then(res => {\n            if (res.status >= 400) {\n                throw new Error(res.body);\n            } else {\n                return res.json();\n            }\n        }).then(data => {\n        let ip = data['ip_addr'];\n        dispatch({type: 'GOT_IP', ip});\n        fetch(BASE_URL + \"/queryUser\", {\n            method: 'POST',\n            body: JSON.stringify({ip}),\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }).then(res => {\n            if (res.status >= 400) {\n                throw new Error(res.body)\n            } else {\n                return res.json()\n            }\n        }).then(json => {\n            dispatch({type: 'UPDATE_EXIST', exist: json.exist})\n        }).catch(err => console.log(err))\n    }).catch(err => console.error(err));\n\n};","import * as React from \"react\";\nimport {Doughnut} from \"react-chartjs-2\";\nimport {connect} from \"react-redux\";\nimport * as PropTypes from \"prop-types\";\nimport {List, ListItem} from \"@material-ui/core\";\nimport {getSummary} from \"../PollView/action\";\nimport Divider from \"@material-ui/core/Divider\";\n\nclass ResultList extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            timer: null\n        };\n        this.props.getSummary();\n    }\n\n    componentDidMount() {\n        let timer = setInterval(this.props.getSummary, 1000);\n        this.setState({timer})\n    }\n\n    render() {\n        let summary = {};\n        for (let info of this.props.summary) {\n            summary[info._id] = info.count\n        }\n\n        let listItems = [];\n        let key = 0;\n        let {entities} = this.props;\n        for (let entity of entities) {\n            let num = [];\n            for (let label of entity) {\n                if (summary.hasOwnProperty(label)) {\n                    num.push(summary[label])\n                } else {\n                    num.push(0)\n                }\n            }\n            let data = {\n                datasets: [{\n                    data: num,\n                    backgroundColor: ['red', 'yellow', 'blue', 'green']\n                }],\n                labels: entity\n            };\n            listItems.push(\n                <ListItem key={key++}>\n                    <Doughnut data={data}/>\n                </ListItem>\n            );\n            if (entity !== entities[entities.length-1]){\n                listItems.push(<Divider key={key++}/>)\n            }\n        }\n\n\n        return (\n            <List>\n                {listItems}\n            </List>\n        )\n    }\n}\n\nResultList.propTypes = {\n    getSummary: PropTypes.func.isRequired,\n    entities: PropTypes.arrayOf(PropTypes.array),\n    summary: PropTypes.array,\n};\n\nconst mapStateToProps = (state) => ({\n    summary: state.polls.summary,\n    entities: state.polls.entities\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n    getSummary: () => getSummary()(dispatch)\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(\n    ResultList\n);","import * as React from \"react\";\nimport * as PropTypes from \"prop-types\";\nimport {init} from \"../PollView/action\";\nimport {connect} from \"react-redux\";\nimport {AppBar, Typography} from \"@material-ui/core\";\n\nclass Header extends React.Component {\n    constructor(props) {\n        super(props);\n        this.props.init();\n    }\n\n    render() {\n        return (\n            <AppBar position='relative'>\n                <Typography variant='h4' color='inherit' align='center'>\n                    Polls\n                </Typography>\n            </AppBar>\n        )\n    }\n}\n\nHeader.propTypes = {\n    init: PropTypes.func\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n    init: () => init()(dispatch)\n});\n\nexport default connect(null, mapDispatchToProps)(\n    Header\n);","import * as React from \"react\";\nimport * as PropTypes from \"prop-types\";\nimport {ListItemText} from \"@material-ui/core\";\nimport {selected_add} from \"./action\";\nimport {connect} from \"react-redux\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\n\nclass PollView extends React.Component {\n    render() {\n        let entity = this.props.nextEntity;\n        let buttons = [];\n        for (let index in entity) {\n            buttons.push(\n                <ListItem key={index}\n                          onClick={() => this.props.selected_add(entity[index])}\n                          button\n                >\n                    <ListItemText primary={entity[index]} align='center'/>\n                </ListItem>\n            )\n        }\n        return (\n            <List component='nav'>\n                {buttons}\n            </List>\n        )\n    }\n}\n\nPollView.propTypes = {\n    nextEntity: PropTypes.array.isRequired,\n    selected_add: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n    nextEntity: state.polls.nextEntity\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n    selected_add: (selected) => dispatch(selected_add(selected)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(\n    PollView\n);","import React, {Component} from 'react';\nimport ResultList from \"./component/ResultList/ResultList\";\nimport {Paper} from \"@material-ui/core\";\nimport Header from \"./component/Header/Header\";\nimport * as PropTypes from \"prop-types\";\nimport {connect} from \"react-redux\";\nimport {checkUser, upload} from \"./component/PollView/action\";\nimport PollView from \"./component/PollView/PollView\";\nimport Grid from \"@material-ui/core/Grid\";\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.props.checkUser()\n    }\n\n    render() {\n        let content;\n        let {nextIndex, entities, ip, selected, exist} = this.props;\n        if (exist || nextIndex > entities.length) {\n            if (nextIndex > entities.length) {\n                this.props.upload(selected, ip);\n            }\n            content = <ResultList/>\n        } else {\n            content = <PollView/>\n        }\n        return (\n            <Grid container alignItems='center' justify='center'>\n                <Grid item lg={4} sm={8} xs={12}>\n                    <Paper>\n                        <Header/>\n                        {content}\n                    </Paper>\n                </Grid>\n            </Grid>\n        );\n    }\n}\n\nApp.propTypes = {\n    ip: PropTypes.string.isRequired,\n    checkUser: PropTypes.func.isRequired,\n    exist: PropTypes.bool.isRequired,\n    selected: PropTypes.array,\n    entities: PropTypes.arrayOf(PropTypes.array),\n    nextIndex: PropTypes.number,\n    upload: PropTypes.func,\n};\n\n\nconst mapStateToProps = (state) => ({\n    ip: state.polls.ip,\n    exist: state.polls.exist,\n    selected: state.polls.selected,\n    entities: state.polls.entities,\n    nextIndex: state.polls.nextIndex\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n    checkUser: () => checkUser()(dispatch),\n    upload: (selected, ip) => upload(selected, ip)(dispatch),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(\n    App\n);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {combineReducers} from \"redux\";\nimport {polls} from \"../component/PollView/reducer\";\n\nexport default combineReducers({polls})","export const polls = (state = {\n    selected: [],\n    nextEntity: [],\n    nextIndex: 0,\n    entities: [],\n    summary: [],\n    ip:'',\n    exist: false\n}, action) => {\n    switch (action.type) {\n        case 'ADD':\n            return {\n                ...state,\n                selected: state.selected.concat([action.selected]),\n                nextEntity: state.entities.length > state.nextIndex ? state.entities[state.nextIndex] : [],\n                nextIndex: state.nextIndex+1\n            };\n        case 'FETCH_ENTITIES':\n            return state;\n        case 'GOT_ENTITIES':\n            return {\n                ...state,\n                entities: action.entities,\n                nextEntity: action.entities.length > state.nextIndex ? action.entities[state.nextIndex]:[],\n                nextIndex: state.nextIndex+1\n            };\n        case 'GOT_IP':\n            return {\n                ...state,\n                ip: action.ip\n            };\n        case 'GET_SUMMARY':\n            return {\n                ...state,\n                summary: action.summary\n            };\n        case 'UPDATE_EXIST':\n            return {\n                ...state,\n                exist: action.exist\n            };\n        default:\n            return state\n    }\n};","import {applyMiddleware, createStore} from \"redux\";\nimport reducer from \"./reducer\";\nimport {composeWithDevTools} from \"redux-devtools-extension\";\nimport thunk from \"redux-thunk\";\n\nexport const store = createStore(\n    reducer,\n    composeWithDevTools(\n        applyMiddleware(thunk)\n    )\n);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./store/store\";\nimport {createMuiTheme} from \"@material-ui/core\";\nimport {MuiThemeProvider} from \"@material-ui/core\";\n\nconst theme = createMuiTheme({\n    overrides: {\n\n    }\n});\n\nReactDOM.render(\n    <Provider store={store}>\n        <MuiThemeProvider theme={theme}>\n            <App/>\n        </MuiThemeProvider>\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}